while there are tokens to be read:
    - read a token

    if the token is:
    - a number:
        add it into the output string
    - an operator o1:
        while (
            there is an operator o2 at the top of the operator stack which is not a left parenthesis, 
            and (o2 has greater precedence than o1
            or (o1 and o2 have the same precedence and o1 is left-associative))
        ):
            - pop o2 from the operator stack and add it to the output string
        - push o1 onto the operator stack

    - a left parenthesis (i.e. "("):
        push it onto the operator stack
    - a right parenthesis (i.e. ")"):

        while the operator at the top of the operator stack is not a left parenthesis:
            - { assert the operator stack is not empty }
            /* If the stack runs out without finding a left parenthesis, then there are mismatched parentheses. */
            - pop the operator from the operator stack and add it to the output string
        - { assert there is a left parenthesis at the top of the operator stack }
        - pop the left parenthesis from the operator stack and discard it

/* After the while loop, pop the remaining items from the operator stack into the output queue. */
while there are tokens on the operator stack:
    /* If the operator token on the top of the stack is a parenthesis, then there are mismatched parentheses. */
    { assert the operator on top of the stack is not a (left) parenthesis }
    - pop the operator from the operator stack and add it to the output string
